diff --git a/android/app/build.gradle b/android/app/build.gradle
index f2caf4a..11e318a 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -38,7 +38,7 @@ android {
 
     defaultConfig {
         // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
-        applicationId "com.example.app"
+        applicationId "com.trendkiwami"
         minSdkVersion 16
         targetSdkVersion 29
         versionCode flutterVersionCode.toInteger()
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index 819d5db..1db940c 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -1,5 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.app">
+    package="com.trendkiwami">
     <!-- io.flutter.app.FlutterApplication is an android.app.Application that
          calls FlutterMain.startInitialization(this); in its onCreate method.
          In most cases you can leave this as-is, but you if you want to provide
@@ -7,7 +7,7 @@
          FlutterApplication and put your custom class here. -->
     <application
         android:name="io.flutter.app.FlutterApplication"
-        android:label="app"
+        android:label="トレンド極"
         android:icon="@mipmap/ic_launcher">
         <activity
             android:name=".MainActivity"
@@ -44,4 +44,5 @@
             android:name="flutterEmbedding"
             android:value="2" />
     </application>
+    <uses-permission android:name="android.permission.INTERNET" />
 </manifest>
diff --git a/android/app/src/main/kotlin/com/example/app/MainActivity.kt b/android/app/src/main/kotlin/com/example/app/MainActivity.kt
index 461fcfb..f99d216 100644
--- a/android/app/src/main/kotlin/com/example/app/MainActivity.kt
+++ b/android/app/src/main/kotlin/com/example/app/MainActivity.kt
@@ -1,4 +1,4 @@
-package com.example.app
+package com.trendkiwami
 
 import io.flutter.embedding.android.FlutterActivity
 
diff --git a/android/gradle.properties b/android/gradle.properties
index 94adc3a..a673820 100644
--- a/android/gradle.properties
+++ b/android/gradle.properties
@@ -1,3 +1,4 @@
 org.gradle.jvmargs=-Xmx1536M
 android.useAndroidX=true
 android.enableJetifier=true
+android.enableR8=true
diff --git a/android/settings_aar.gradle b/android/settings_aar.gradle
new file mode 100644
index 0000000..e7b4def
--- /dev/null
+++ b/android/settings_aar.gradle
@@ -0,0 +1 @@
+include ':app'
diff --git a/ios/Runner/Info.plist b/ios/Runner/Info.plist
index c8a8f1d..c9c4ee5 100644
--- a/ios/Runner/Info.plist
+++ b/ios/Runner/Info.plist
@@ -11,7 +11,7 @@
 	<key>CFBundleInfoDictionaryVersion</key>
 	<string>6.0</string>
 	<key>CFBundleName</key>
-	<string>app</string>
+	<string>トレンド極</string>
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
diff --git a/lib/main.dart b/lib/main.dart
index 11655b6..41698c3 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,117 +1,63 @@
 import 'package:flutter/material.dart';
 
-void main() {
-  runApp(MyApp());
-}
+import 'menu.dart';
+import 'widget/hello_world.dart';
+import 'widget/image_test.dart';
+import 'widget/word.dart';
 
-class MyApp extends StatelessWidget {
-  // This widget is the root of your application.
-  @override
-  Widget build(BuildContext context) {
-    return MaterialApp(
-      title: 'Flutter Demo',
-      theme: ThemeData(
-        // This is the theme of your application.
-        //
-        // Try running your application with "flutter run". You'll see the
-        // application has a blue toolbar. Then, without quitting the app, try
-        // changing the primarySwatch below to Colors.green and then invoke
-        // "hot reload" (press "r" in the console where you ran "flutter run",
-        // or simply save your changes to "hot reload" in a Flutter IDE).
-        // Notice that the counter didn't reset back to zero; the application
-        // is not restarted.
-        primarySwatch: Colors.blue,
-        // This makes the visual density adapt to the platform that you run
-        // the app on. For desktop platforms, the controls will be smaller and
-        // closer together (more dense) than on mobile platforms.
-        visualDensity: VisualDensity.adaptivePlatformDensity,
-      ),
-      home: MyHomePage(title: 'Flutter Demo Home Page'),
-    );
-  }
-}
+void main() => runApp(MyApp());
 
-class MyHomePage extends StatefulWidget {
-  MyHomePage({Key key, this.title}) : super(key: key);
-
-  // This widget is the home page of your application. It is stateful, meaning
-  // that it has a State object (defined below) that contains fields that affect
-  // how it looks.
-
-  // This class is the configuration for the state. It holds the values (in this
-  // case the title) provided by the parent (in this case the App widget) and
-  // used by the build method of the State. Fields in a Widget subclass are
-  // always marked "final".
-
-  final String title;
+class MyApp extends StatefulWidget {
+  const MyApp({Key key}) : super(key: key);
 
   @override
-  _MyHomePageState createState() => _MyHomePageState();
+  _MyApp createState() => _MyApp();
 }
 
-class _MyHomePageState extends State<MyHomePage> {
-  int _counter = 0;
-
-  void _incrementCounter() {
-    setState(() {
-      // This call to setState tells the Flutter framework that something has
-      // changed in this State, which causes it to rerun the build method below
-      // so that the display can reflect the updated values. If we changed
-      // _counter without calling setState(), then the build method would not be
-      // called again, and so nothing would appear to happen.
-      _counter++;
-    });
+class _MyApp extends State<MyApp> {
+  final _title = 'トレンド極';
+
+  var _menuIndex = 0;
+  final _menuItems = [
+    MenuItem(
+      icon: Icon(Icons.tag),
+      title: 'ワード',
+      widget: WordWidget(),
+    ),
+    MenuItem(
+      icon: Icon(Icons.check),
+      title: 'おすすめ',
+      widget: ImageTestWidget(),
+    ),
+    MenuItem(
+      icon: Icon(Icons.videocam),
+      title: '配信中',
+      widget: HelloWorldWidget(),
+    ),
+  ];
+
+  void _menuSwitch(int index) {
+    print(index);
+    setState(() => _menuIndex = index);
   }
 
   @override
   Widget build(BuildContext context) {
-    // This method is rerun every time setState is called, for instance as done
-    // by the _incrementCounter method above.
-    //
-    // The Flutter framework has been optimized to make rerunning build methods
-    // fast, so that you can just rebuild anything that needs updating rather
-    // than having to individually change instances of widgets.
-    return Scaffold(
-      appBar: AppBar(
-        // Here we take the value from the MyHomePage object that was created by
-        // the App.build method, and use it to set our appbar title.
-        title: Text(widget.title),
-      ),
-      body: Center(
-        // Center is a layout widget. It takes a single child and positions it
-        // in the middle of the parent.
-        child: Column(
-          // Column is also a layout widget. It takes a list of children and
-          // arranges them vertically. By default, it sizes itself to fit its
-          // children horizontally, and tries to be as tall as its parent.
-          //
-          // Invoke "debug painting" (press "p" in the console, choose the
-          // "Toggle Debug Paint" action from the Flutter Inspector in Android
-          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
-          // to see the wireframe for each widget.
-          //
-          // Column has various properties to control how it sizes itself and
-          // how it positions its children. Here we use mainAxisAlignment to
-          // center the children vertically; the main axis here is the vertical
-          // axis because Columns are vertical (the cross axis would be
-          // horizontal).
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: <Widget>[
-            Text(
-              'You have pushed the button this many times:',
-            ),
-            Text(
-              '$_counter',
-              style: Theme.of(context).textTheme.headline4,
-            ),
-          ],
+    return MaterialApp(
+      title: _title,
+      home: Scaffold(
+        appBar: AppBar(
+          title: Text(_title),
+          centerTitle: true,
+          backgroundColor: Colors.black87,
+        ),
+        body: _menuItems.elementAt(_menuIndex).widget,
+        bottomNavigationBar: MenuWidget(
+          index: _menuIndex,
+          items: _menuItems,
+          tap: _menuSwitch,
         ),
       ),
-      floatingActionButton: FloatingActionButton(
-        onPressed: _incrementCounter,
-        tooltip: 'Increment',
-        child: Icon(Icons.add),
-      ), // This trailing comma makes auto-formatting nicer for build methods.
     );
   }
 }
diff --git a/lib/menu.dart b/lib/menu.dart
new file mode 100644
index 0000000..6f1b0ea
--- /dev/null
+++ b/lib/menu.dart
@@ -0,0 +1,32 @@
+import 'package:flutter/material.dart';
+
+class MenuItem {
+  final Icon icon;
+  final String title;
+  final Widget widget;
+
+  const MenuItem({this.icon, this.title, this.widget});
+}
+
+class MenuWidget extends StatelessWidget {
+  final int index;
+  final List<MenuItem> items;
+  final Function(int) tap;
+
+  const MenuWidget({this.index, this.items, this.tap});
+
+  @override
+  Widget build(BuildContext context) {
+    return BottomNavigationBar(
+      items: items.map((item) {
+        return BottomNavigationBarItem(
+          icon: item.icon,
+          label: item.title,
+        );
+      }).toList(),
+      currentIndex: index,
+      selectedItemColor: Colors.black87,
+      onTap: tap,
+    );
+  }
+}
diff --git a/lib/widget/hello_world.dart b/lib/widget/hello_world.dart
new file mode 100644
index 0000000..4a3f300
--- /dev/null
+++ b/lib/widget/hello_world.dart
@@ -0,0 +1,10 @@
+import 'package:flutter/material.dart';
+
+class HelloWorldWidget extends StatelessWidget {
+  @override
+  Widget build(BuildContext context) {
+    return Center(
+      child: Text('Hello World'),
+    );
+  }
+}
diff --git a/lib/widget/image_test.dart b/lib/widget/image_test.dart
new file mode 100644
index 0000000..39429d4
--- /dev/null
+++ b/lib/widget/image_test.dart
@@ -0,0 +1,14 @@
+import 'package:flutter/material.dart';
+
+class ImageTestWidget extends StatelessWidget {
+  @override
+  Widget build(BuildContext context) {
+    return Image.network(
+      'https://pbs.twimg.com/media/Et1O05-VIAQPdb1?format=jpg&name=medium',
+      height: double.infinity,
+      width: double.infinity,
+      fit: BoxFit.cover,
+      alignment: Alignment.center,
+    );
+  }
+}
diff --git a/lib/widget/word.dart b/lib/widget/word.dart
new file mode 100644
index 0000000..39df565
--- /dev/null
+++ b/lib/widget/word.dart
@@ -0,0 +1,171 @@
+import 'dart:convert';
+
+import 'package:flutter/material.dart';
+import 'package:http/http.dart' as http;
+import 'package:timeago/timeago.dart' as timeago;
+import 'package:url_launcher/url_launcher.dart';
+import 'package:flutter_brand_icons/flutter_brand_icons.dart';
+
+class Word {
+  final String title;
+  final DateTime updatedAt;
+  final double score;
+
+  const Word({this.title, this.updatedAt, this.score});
+}
+
+class SearchEngine {
+  final String name;
+  final Icon icon;
+  final String pattern;
+
+  const SearchEngine({this.name, this.icon, this.pattern});
+}
+
+class WordDetailsWidget extends StatelessWidget {
+  final Word word;
+  final List<SearchEngine> _engineList = const [
+    SearchEngine(
+      name: "Google",
+      icon: Icon(BrandIcons.google),
+      pattern: "https://www.google.com/search?q=@query",
+    ),
+    SearchEngine(
+      name: "Yahoo! JAPAN",
+      icon: Icon(BrandIcons.yahoo),
+      pattern: "https://search.yahoo.co.jp/search?p=@query",
+    ),
+    SearchEngine(
+      name: "Twitter",
+      icon: Icon(BrandIcons.twitter),
+      pattern: "https://twitter.com/search?q=%28@query+OR+%23@query%29",
+    ),
+    SearchEngine(
+      name: "YouTube",
+      icon: Icon(BrandIcons.youtube),
+      pattern: "https://www.youtube.com/results?search_query=@query",
+    ),
+  ];
+
+  const WordDetailsWidget({this.word});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        title: Text(word.title),
+        backgroundColor: Colors.green[700],
+      ),
+      body: ListView.separated(
+        itemCount: _engineList.length,
+        itemBuilder: (context, index) {
+          final engine = _engineList.elementAt(index);
+
+          return ListTile(
+            leading: engine.icon,
+            title: Text('${engine.name} で検索'),
+            onTap: () async {
+              final url = engine.pattern.replaceAll("@query", word.title);
+
+              print(url);
+              await launch(url);
+            },
+          );
+        },
+        separatorBuilder: (context, index) => Divider(),
+      ),
+    );
+  }
+}
+
+class WordWidget extends StatelessWidget {
+  final _url = 'https://ultimatetrends.github.io/api/words.json';
+
+  List<Word> _parseJson(List<dynamic> json) {
+    return json.map((entry) {
+      return Word(
+        title: entry['title'],
+        updatedAt: DateTime.parse(entry['updated_at']),
+        score: entry['score'],
+      );
+    }).toList();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    timeago.setLocaleMessages('ja', timeago.JaMessages());
+
+    return FutureBuilder(
+      future: http.get(_url),
+      builder: (context, snapshot) {
+        if (snapshot.hasData) {
+          final json = jsonDecode(snapshot.data.body);
+          final wordList = _parseJson(json);
+
+          return ListView.separated(
+            itemCount: wordList.length,
+            itemBuilder: (context, index) {
+              final rank = index + 1;
+              final word = wordList.elementAt(index);
+              final moment = timeago.format(word.updatedAt, locale: 'ja');
+
+              return ListTile(
+                title: Row(
+                  children: [
+                    Expanded(
+                      flex: 2,
+                      child: Column(
+                        children: [
+                          Text(
+                            '$rank',
+                            style: TextStyle(
+                              color: Colors.grey,
+                              fontSize: 22,
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                    Expanded(
+                      flex: 8,
+                      child: Column(
+                        children: [
+                          Text(
+                            word.title,
+                            style: TextStyle(
+                              fontWeight: FontWeight.w500,
+                              fontSize: 18,
+                            ),
+                          ),
+                          Text(
+                            '${word.score} スコア / $moment',
+                            style: TextStyle(
+                              color: Colors.grey,
+                              fontSize: 13,
+                            ),
+                          ),
+                        ],
+                        crossAxisAlignment: CrossAxisAlignment.start,
+                      ),
+                    ),
+                  ],
+                ),
+                onTap: () {
+                  final route = MaterialPageRoute(builder: (context) {
+                    return WordDetailsWidget(word: word);
+                  });
+                  Navigator.of(context).push(route);
+                },
+              );
+            },
+            separatorBuilder: (context, index) => Divider(),
+          );
+        } else if (snapshot.hasError) {
+          return Text('${snapshot.error}');
+        }
+
+        return CircularProgressIndicator();
+      },
+    );
+  }
+}
diff --git a/pubspec.lock b/pubspec.lock
index f628010..67d0888 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -62,11 +62,37 @@ packages:
     description: flutter
     source: sdk
     version: "0.0.0"
+  flutter_brand_icons:
+    dependency: "direct main"
+    description:
+      name: flutter_brand_icons
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
   flutter_test:
     dependency: "direct dev"
     description: flutter
     source: sdk
     version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  http:
+    dependency: "direct main"
+    description:
+      name: http
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.12.2"
+  http_parser:
+    dependency: transitive
+    description:
+      name: http_parser
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "3.1.4"
   matcher:
     dependency: transitive
     description:
@@ -88,6 +114,20 @@ packages:
       url: "https://pub.dartlang.org"
     source: hosted
     version: "1.8.0-nullsafety.1"
+  pedantic:
+    dependency: transitive
+    description:
+      name: pedantic
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.9.2"
+  plugin_platform_interface:
+    dependency: transitive
+    description:
+      name: plugin_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.3"
   sky_engine:
     dependency: transitive
     description: flutter
@@ -135,6 +175,13 @@ packages:
       url: "https://pub.dartlang.org"
     source: hosted
     version: "0.2.19-nullsafety.2"
+  timeago:
+    dependency: "direct main"
+    description:
+      name: timeago
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.29"
   typed_data:
     dependency: transitive
     description:
@@ -142,6 +189,48 @@ packages:
       url: "https://pub.dartlang.org"
     source: hosted
     version: "1.3.0-nullsafety.3"
+  url_launcher:
+    dependency: "direct main"
+    description:
+      name: url_launcher
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "5.7.10"
+  url_launcher_linux:
+    dependency: transitive
+    description:
+      name: url_launcher_linux
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.0.1+4"
+  url_launcher_macos:
+    dependency: transitive
+    description:
+      name: url_launcher_macos
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.0.1+9"
+  url_launcher_platform_interface:
+    dependency: transitive
+    description:
+      name: url_launcher_platform_interface
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.0.9"
+  url_launcher_web:
+    dependency: transitive
+    description:
+      name: url_launcher_web
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.1.5+3"
+  url_launcher_windows:
+    dependency: transitive
+    description:
+      name: url_launcher_windows
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.0.1+3"
   vector_math:
     dependency: transitive
     description:
@@ -150,4 +239,5 @@ packages:
     source: hosted
     version: "2.1.0-nullsafety.3"
 sdks:
-  dart: ">=2.10.0-110 <2.11.0"
+  dart: ">=2.10.0 <2.11.0"
+  flutter: ">=1.22.0 <2.0.0"
diff --git a/pubspec.yaml b/pubspec.yaml
index 88498e9..c034d5e 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -23,6 +23,10 @@ environment:
 dependencies:
   flutter:
     sdk: flutter
+  http: ^0.12.2
+  timeago: ^2.0.29
+  url_launcher: ^5.7.10
+  flutter_brand_icons: ^1.1.0
 
 
   # The following adds the Cupertino Icons font to your application.
